#include "Cell.h"
#include "./DanyaArtefact/rare.h"
#include "./DanyaArtefact/usually.h"
#include "./DanyaArtefact/frequent.h"
#include "./DanyaArtefact/artefact.h"
#include "./DanyaArtefact/artefacts_randomization.h"
// нужны для рандомизации генерации холмов
#include <set>
#include <random>

class Board
{
public:
	Board(int width, int height) {
		this->width = width;
		this->height = height;
		Pole.resize(width, vector<Cell> (height));
	};
	~Board() {
		for (size_t i = 0; i < Pole.size(); i++)
		{            
			Pole[i].clear();
		}
		Pole.clear();
	}
	void CreateBoard(TDummy * RootDummy, float delta_x, float delta_y)
	{
        float x, y;
        delta_x *= -1;
		for (size_t i = 0, y = delta_y; i < this->width; i++, y -= delta_y) {
			for (size_t j = 0, x = delta_x; j < this->height; j++, x -= delta_x) {
				Pole[i][j].ground = new TCube(RootDummy);
				Pole[i][j].ground -> Parent = RootDummy;
				Pole[i][j].ground -> Height = 0.25;
				Pole[i][j].ground -> Depth = 1.95;
				Pole[i][j].ground -> Width = 1.95;
				Pole[i][j].ground -> Position -> Z = y;
				Pole[i][j].ground -> Position -> X = x;
			}
		}
	}
    // создает все эти рандомные артефакты и сует их в ячейки поля.
	void initAllRandomArtefacts(int quantity_artefacts)
	{
		int size_Board = min(this->width, this->height);
		vector <artefact*> Vector_Random_Artefacts = get_list_of_artefacts(quantity_artefacts, size_Board);

		for (int i = 0; i < Vector_Random_Artefacts.size(); i++)
		{
			 // координаты х у чтобы на поле поместить объект
			 int x, y;
			 x = Vector_Random_Artefacts[i]->cord_x();
			 y = Vector_Random_Artefacts[i]->cord_y();
			 // редкость артефакта. чтобы понять какой конструктор использовать в cell
			 string ability = Vector_Random_Artefacts[i]->availability();

			 if (ability == "rare")
			 {
				  Pole[x][y].setRareArtifact(*Vector_Random_Artefacts[i]);
			 }
			 else if (ability == "usually")
			 {
				  Pole[x][y].setUsuallyArtifact(*Vector_Random_Artefacts[i]);
			 }
			 else if (ability == "frequent")
			 {
				  Pole[x][y].setFrequentArtifact(*Vector_Random_Artefacts[i]);
			 }
		}
	}

	void generateAllHills() {
		// множество координат х.у которые были уже заняты сгенерированными
        // клетками
		set<pair<int,int>> Busy_cells;
		// количество холмов которые мы сгенерируем
		int count_hills = (min(width,height) / 2) - 1;
		// размер квадрата в котором будем генерировать поле

		int sizeBoardHills = min(width,height);

		int x_rand = 0;
		int y_rand = 0;
        int default_height_hill = 10;

		// основной цикл заполнения поля горами
		while(count_hills > 0)
		{
			// генерируем рандомно координаты горы
			x_rand = rand() / sizeBoardHills;
			y_rand = rand() / sizeBoardHills;

			// если горы с такими координатами не было найдено, создаем
			if (Busy_cells.find({x_rand, y_rand}) != Busy_cells.end()) {
			   Busy_cells.insert({x_rand, y_rand});
			   count_hills-=1;
			}
		}

		for(auto i: Busy_cells) {
			 Pole[i.first][i.second].setHeight(default_height_hill);
		}

	}

	vector<vector<Cell>> Pole;
private:
	int width;
	int height;
};
